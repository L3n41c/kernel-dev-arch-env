#!/bin/bash
set -euo pipefail

nbd=nbd0

img=arch.img
size=10G
type=qcow2
user=

# packages to ignore for space savings
readonly packages_to_skip=(
    cryptsetup
    device-mapper
    dhcpcd
    inetutils
    iputils
    jfsutils
    licenses
    linux
    lvm2
    man-db
    man-pages
    mdadm
    nano
    netctl
    openresolv
    pcmciautils
    reiserfsprogs
    s-nail
    systemd-sysvcompat
    usbutils
    vi
    xfsprogs
)

readonly packages_to_add=(
    systemd
    haveged
)

usage()
{
    cat <<EOF
Usage: create_drive [-o <filename>] [-s <size>] [-t qcow2|raw] [-u <user>]

  -o <filename>   Path of the image to generate. Default to $img.
  -s <size>       Size of the image to generate. Default to $size.
  -t <type>       Type of image to create (qcow2, raw). Default to $type.
  -u <user>       This program must be run as root. This option allows
                  to change the owner of the generated image.
EOF
}

while getopts ho:s:t:u: opt; do
    case "$opt" in
        o)
            img="$OPTARG"
            ;;
        s)
            size="$OPTARG"
            ;;
        t)
            type="$OPTARG"
            ;;
        u)
            user="$OPTARG"
            ;;
        h)
            usage
            exit 0
            ;;
        ?)
            usage
            exit 1
            ;;
    esac
done

hash pacstrap >&/dev/null || {
    echo "pacstrap is missing" >&2
    exit 1
}

hash arch-chroot >&/dev/null || {
    echo "arch-chroot is missing" >&2
    exit 1
}

if [[ $(id -u) -ne 0 ]]; then
    echo "Must be run as root" >&2
    exit 1
fi

readonly img_file="${img##*/}"
readonly img_dir="${img%${img_file}}"
readonly img_base="${img_file%.*}"
readonly img_ext="${img_file##${img_base}}"
readonly img_wip="${img_dir}${img_base}-WIP${img_ext}"

if [[ "$type" == "qcow2" ]]; then
    modprobe nbd
    qemu-img create -f "$type" "$img_wip" "$size"
    qemu-nbd --discard=on -c /dev/$nbd "$img_wip"
    device=/dev/$nbd
elif [[ "$type" == "raw" ]]; then
    truncate -s "$size" "$img_wip"
    losetup -f "$img_wip"
    device=$(losetup -j "$img_wip" | cut -d: -f1)
else
    echo "type must be either qcow2 or raw. Got $type." >&2
    exit 1
fi
mkfs.ext4 $device
mount_point="$(mktemp -d)"
mount -o discard $device "$mount_point"

function cleanup {
    set +e
    umount "$mount_point"
    rmdir "$mount_point"
    if [[ "$type" == "qcow2" ]]; then
        qemu-nbd -d $device
    elif [[ "$type" == "raw" ]]; then
        losetup -d $device
    else
        echo "BUG" >&2
    fi
    rm -f "$img_wip"
    set -e
}
trap cleanup EXIT

readonly base_packages=($(pacman -Sg base | cut -d' ' -f2))
readonly packages_to_install="$(comm -23 <(IFS=$'\n'; sort <<<"${base_packages[*]}") <(IFS=$'\n'; sort <<<"${packages_to_skip[*]}")) ${packages_to_add[@]}"
pacstrap -c -G "$mount_point" $packages_to_install --hookdir /no_hook

cat > "$mount_point"/etc/systemd/network/zz-default.network <<EOF
[Network]
DHCP=v4

[DHCPv4]
UseMTU=true
EOF
rm "$mount_point"/etc/resolv.conf
ln -s ../run/systemd/resolve/resolv.conf "$mount_point"/etc/resolv.conf
arch-chroot "$mount_point" systemctl enable systemd-networkd
arch-chroot "$mount_point" systemctl enable systemd-resolved
sed -i 's/dns/resolve/' "$mount_point"/etc/nsswitch.conf

mkdir "$mount_point"/mnt/host
cat > "$mount_point"/etc/fstab << EOF
host	/mnt/host	9p	ro,trans=virtio,version=9p2000.L	0 0
EOF

cat > "$mount_point"/etc/profile.d/set_tty.sh <<EOF
export TERM=\$(awk -v RS=' ' -v FS='=' '\$1 == "term" {print \$2}' < /proc/cmdline)
tput init
stty rows \$(awk -v RS=' ' -v FS='=' '\$1 == "tty_lines" {print \$2}' < /proc/cmdline)
stty cols \$(awk -v RS=' ' -v FS='=' '\$1 == "tty_cols"  {print \$2}' < /proc/cmdline)
kill -s WINCH \$\$
EOF

mv "$img_wip" "$img"
if [ -n "$user" ]; then
    chown "$user": "$img"
fi
